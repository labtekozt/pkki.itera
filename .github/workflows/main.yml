name: PKKI ITERA - Main CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Security and Code Quality Checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-dev --optimize-autoloader

      - name: Security Audit - Composer
        run: composer audit --no-dev

      - name: Check for known vulnerabilities
        run: |
          if [ -f "composer.lock" ]; then
            curl -H "Accept: text/plain" https://security.symfony.com/check_lock -F lock=@composer.lock
          fi

  # Code Quality and Testing
  test-and-quality:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: pkki_itera_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, mysql
          coverage: pcov

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Install NPM dependencies
        run: npm ci

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=pkki_itera_test" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=root" >> .env
          echo "CACHE_STORE=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Clear config cache
        run: php artisan config:clear

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Seed database
        run: php artisan db:seed --force

      - name: Build frontend assets
        run: npm run build

      - name: Execute PHPUnit tests
        run: php artisan test --coverage --min=80

      - name: Run Laravel Pint (Code Style)
        run: ./vendor/bin/pint --test

      - name: Run PHPStan (Static Analysis)
        run: ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Run Larastan
        run: php artisan code:analyse

  # Frontend Build and Assets
  build-assets:
    name: Build Frontend Assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Build production assets
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built-assets
          path: public/build/
          retention-days: 30

  # Deployment to VPS (only on main branch)
  deploy-production:
    name: Deploy to Production VPS
    runs-on: ubuntu-latest
    needs: [security-audit, test-and-quality, build-assets]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Add VPS to known hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /home/partikelxyz/pkki.itera
            
            # Enable maintenance mode
            php artisan down --message="Updating system..." --retry=60
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/main
            
            # Install/update dependencies
            composer install --no-dev --optimize-autoloader --no-interaction
            
            # Update environment
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan icons:cache
            
            # Run migrations
            php artisan migrate --force
            
            # Generate Filament Shield permissions
            php artisan shield:generate --all
            
            # Clear application cache
            php artisan cache:clear
            php artisan queue:restart
            
            # Build frontend assets
            npm ci --production
            npm run build
            
            # Set proper permissions
            chmod -R 755 storage bootstrap/cache
            chown -R www-data:www-data storage bootstrap/cache public/build
            
            # Disable maintenance mode
            php artisan up
            
            echo "Deployment completed successfully!"
          EOF

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment to production completed successfully"
          echo "🌐 Application URL: https://hki.proyekai.com"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed"
          echo "Please check the logs and fix any issues"

  # Development deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-audit, test-and-quality]
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add staging deployment commands here when staging server is available
          echo "⚠️  Staging deployment not configured yet"
