<?php

namespace App\Filament\Resources\SubmissionResource\Pages;

use App\Filament\Forms\SubmissionFormFactory;
use App\Filament\Resources\SubmissionResource;
use App\Models\SubmissionType;
use App\Models\Document;
use App\Models\SubmissionDocument;
use App\Services\SubmissionService;
use App\Services\WorkflowService;
use Filament\Actions;
use Filament\Forms;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Livewire\Features\SupportFileUploads\TemporaryUploadedFile;

class EditSubmission extends EditRecord
{
    protected static string $resource = SubmissionResource::class;

    public $uploadedDocuments = [];
    public $documentValidationStatus = [];
    public $isDocumentComplete = false;
    public $stageRequirementsSatisfied = false;

    /**
     * Generate a properly formatted URI for document storage
     * 
     * @param string|int $requirementId The requirement ID
     * @param string $filename The filename to use
     * @return string The formatted URI path
     */
    protected function formatDocumentUri($requirementId, $filename): string
    {
        return "submissions/{$this->record->id}/{$requirementId}/{$filename}";
    }

    protected function mutateFormDataBeforeFill(array $data): array
    {
        // Initialize document validation status
        $this->uploadedDocuments = [];
        $this->documentValidationStatus = [];
        $this->isDocumentComplete = false;
        $this->stageRequirementsSatisfied = false;

        // Check document requirements immediately
        $this->checkDocumentRequirements();

        // Process type-specific details
        $submissionType = $this->record->submissionType;

        if ($submissionType) {
            switch ($submissionType->slug) {
                case 'paten':
                    if ($this->record->patentDetail) {
                        $data['patentDetail'] = $this->record->patentDetail->toArray();
                    }
                    break;
                case 'brand':
                    if ($this->record->brandDetail) {
                        $data['brandDetail'] = $this->record->brandDetail->toArray();
                    }
                    break;
                case 'haki':
                    if ($this->record->hakiDetail) {
                        $data['hakiDetail'] = $this->record->hakiDetail->toArray();
                    }
                    break;
                case 'industrial_design':
                    if ($this->record->industrialDesignDetail) {
                        $data['industrialDesignDetail'] = $this->record->industrialDesignDetail->toArray();
                    }
                    break;
            }
        }

        return $data;
    }

    /**
     * Check if all required documents have been uploaded
     */
    public function checkDocumentRequirements(): void
    {
        if (!$this->record || !$this->record->submissionType) {
            $this->isDocumentComplete = false;
            return;
        }

        $requirements = $this->record->submissionType->documentRequirements()
            ->where('required', true)
            ->get();

        if ($requirements->isEmpty()) {
            $this->isDocumentComplete = true;
            return;
        }

        $missingDocuments = [];
        $this->documentValidationStatus = [];


        foreach ($requirements as $requirement) {
            $document = $this->record->submissionDocuments()
                ->where('requirement_id', $requirement->id)
                ->where('status', '!=', 'replaced')
                ->latest()
                ->first();

            if (!$document) {
                $missingDocuments[] = $requirement->name;
                $this->documentValidationStatus[$requirement->id] = [
                    'status' => 'missing',
                    'message' => 'Required document is missing'
                ];
            } else {
                $this->documentValidationStatus[$requirement->id] = [
                    'status' => 'uploaded',
                    'document_status' => $document->status,
                    'document_id' => $document->id
                ];
            }
        }

        $this->isDocumentComplete = empty($missingDocuments);
    }

    /**
     * Process document uploads when form is saved
     */
    protected function processDocumentUploads(array $formData): void
    {
        // Check if there are documents to process
        if (isset($formData['documents']) && is_array($formData['documents'])) {
            foreach ($formData['documents'] as $requirementId => $uploadedFile) {
                if (!$uploadedFile) continue;

                $filename = $uploadedFile instanceof TemporaryUploadedFile ?
                    $uploadedFile->getClientOriginalName() : basename($uploadedFile);

                $document = Document::create([
                    'title' => $filename,
                    'uri' => $this->formatDocumentUri($requirementId, $filename),
                    'mimetype' => $uploadedFile instanceof TemporaryUploadedFile ? $uploadedFile->getMimeType() : Storage::disk('public')->mimeType($uploadedFile),
                    'size' => $uploadedFile instanceof TemporaryUploadedFile ? $uploadedFile->getSize() : Storage::disk('public')->size($uploadedFile),
                ]);

                // Move file from temporary storage to permanent storage
                if ($uploadedFile instanceof TemporaryUploadedFile) {
                    // Get the proper URI for storage
                    $uri = $this->formatDocumentUri($requirementId, $uploadedFile->getClientOriginalName());

                    // Store the file using public disk
                    Storage::disk('public')->put(
                        $uri,
                        file_get_contents($uploadedFile->getRealPath())
                    );

                    // Update document record with correct URI
                    $document->update(['uri' => $uri]);
                }

                // Create the submission document record
                $this->record->submissionDocuments()->create([
                    'document_id' => $document->id,
                    'requirement_id' => $requirementId,
                    'status' => 'pending',
                ]);
            }

            // Update document validation status
            $this->checkDocumentRequirements();
        }
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                // Main submission information - always visible
                Section::make('📋 Informasi Pengajuan')
                    ->description('Informasi dasar pengajuan Anda')
                    ->schema([
                        // Hidden fields for system use
                        Hidden::make('user_id')
                            ->default(fn() => $this->record->user_id),

                        // Submission type - read-only after creation
                        Select::make('submission_type_id')
                            ->label('🎯 Jenis Pengajuan')
                            ->relationship('submissionType', 'name')
                            ->required()
                            ->disabled()
                            ->helperText('Jenis pengajuan tidak dapat diubah setelah dibuat')
                            ->default(fn() => $this->record->submission_type_id)
                            ->dehydrated(false),

                        // Title field
                        TextInput::make('title')
                            ->label('📝 Judul Pengajuan')
                            ->required()
                            ->helperText('Berikan judul yang jelas dan mudah dipahami')
                            ->maxLength(255)
                            ->disabled(fn() => !in_array($this->record->status, ['draft', 'revision_needed']))
                            ->columnSpanFull(),
                    ]),

                // Type-specific details section
                Section::make('📋 Detail Pengajuan')
                    ->description('Informasi detail sesuai jenis pengajuan')
                    ->schema(function () {
                        $submissionType = $this->record->submissionType;
                        if (!$submissionType) {
                            return [
                                Placeholder::make('no_type')
                                    ->content('⚠️ Tidak ada jenis pengajuan yang terkait')
                                    ->columnSpanFull(),
                            ];
                        }

                        // Get the form fields for this submission type
                        $typeFields = SubmissionFormFactory::getFormForSubmissionType($submissionType->slug);
                        
                        // Disable fields if not in editable status
                        if (!in_array($this->record->status, ['draft', 'revision_needed'])) {
                            foreach ($typeFields as $field) {
                                if (method_exists($field, 'disabled')) {
                                    $field->disabled(true);
                                }
                            }
                        }
                        
                        return $typeFields;
                    })
                    ->collapsible()
                    ->collapsed(fn() => !in_array($this->record->status, ['draft', 'revision_needed'])),

                // Document requirements section
                Section::make('📄 Dokumen yang Diperlukan')
                    ->description('Upload semua dokumen yang diminta')
                    ->schema(fn() => $this->getSimplifiedDocumentSchema())
                    ->collapsible()
                    ->collapsed(fn() => $this->record->status === 'completed'),

                // Actions section - for status changes and submission
                ...($this->canEdit() ? $this->getSimplifiedActionSchema() : $this->getReadOnlyDisplay()),
            ])
            ->columns(1); // Single column layout for simplicity
    }

    /**
     * Check if the current user can edit this submission
     */
    protected function canEdit(): bool
    {
        return in_array($this->record->status, ['draft', 'revision_needed', 'cancelled']);
    }

    protected function mutateFormDataBeforeSave(array $data): array
    {
        $data['processed_by'] = Auth::id();

        $comment = '';
        if (!empty($data['status_notes'])) {
            $comment = $data['status_notes'];
            unset($data['status_notes']);
        } elseif (!empty($data['comment'])) {
            $comment = $data['comment'];
        } elseif (isset($data['status']) && $data['status'] !== $this->record->status) {
            $comment = "Status changed from {$this->record->status} to {$data['status']}";
        }

        $data['comment'] = $comment;

        return $data;
    }

    protected function handleRecordUpdate(Model $record, array $data): Model
    {
        $submissionService = app(SubmissionService::class);
        $documents = [];

        try {
            // Process any document uploads that weren't processed via live updates
            $this->processDocumentUploads($data);

            // Re-check requirements after possible uploads
            $this->checkDocumentRequirements();

            if (isset($data['status']) && $data['status'] === 'submitted' && $record->status === 'draft') {
                if (!$this->isDocumentComplete) {
                    Notification::make()
                        ->title('Cannot submit incomplete application')
                        ->body('Please upload all required documents before submitting')
                        ->danger()
                        ->send();

                    return $record;
                }

                if (!isset($data['current_stage_id']) && $record->submissionType) {
                    $firstStage = $record->submissionType->firstStage();
                    if ($firstStage) {
                        $data['current_stage_id'] = $firstStage->id;
                    }
                }
            }

            // Special handling for resubmission from revision_needed
            $wasRevisionNeeded = $record->status === 'revision_needed';

            $updatedRecord = $submissionService->updateSubmission(
                $record,
                $data,
                documents: $documents
            );

            // Handle notifications based on status change
            if (isset($data['status']) && $data['status'] === 'submitted') {
                if ($record->status === 'draft') {
                    Notification::make()
                        ->title('Submission successfully sent for review')
                        ->body('Your submission has been received and is now in the review process')
                        ->success()
                        ->send();
                } else if ($record->status === 'revision_needed') {
                    // This is a resubmission after revisions
                    Notification::make()
                        ->title('Resubmission successful')
                        ->body('Your revised submission has been sent back to the reviewer')
                        ->success()
                        ->send();
                    
                    // Notify reviewers through workflow assignments
                    $this->notifyReviewers($updatedRecord);
                    
                    // Create tracking history entry for the resubmission
                    \App\Models\TrackingHistory::create([
                        'id' => \Illuminate\Support\Str::uuid()->toString(),
                        'submission_id' => $updatedRecord->id,
                        'stage_id' => $updatedRecord->current_stage_id,
                        'action' => 'resubmitted',
                        'status' => 'in_review',
                        'comment' => $data['comment'] ?? 'Submission resubmitted after revision',
                        'processed_by' => Auth::id(),
                        'source_status' => 'revision_needed',
                        'target_status' => 'submitted',
                        'event_type' => 'status_change',
                        'metadata' => [
                            'user_role' => Auth::user()->roles->pluck('name')->first() ?? 'submitter',
                        ],
                        'event_timestamp' => now(),
                    ]);
                }
            } else {
                Notification::make()
                    ->title('Submission updated successfully')
                    ->success()
                    ->send();
            }

            return $updatedRecord;
        } catch (\Exception $e) {
            Notification::make()
                ->title('Error updating submission')
                ->body($e->getMessage())
                ->danger()
                ->send();

            return $record;
        }
    }
    
    /**
     * Notify all relevant reviewers when a submission is resubmitted
     */
    protected function notifyReviewers(Model $record): void
    {
        // Find the latest reviewer assignment for this submission
        $latestAssignments = $record->currentStageAssignments()
            ->orderBy('created_at', 'desc')
            ->get();
            
        if ($latestAssignments->isEmpty()) {
            return;
        }
        
        // Get all reviewers who should be notified
        $reviewerIds = $latestAssignments->pluck('reviewer_id')->unique();
        
        // Set all current assignments back to pending
        foreach ($latestAssignments as $assignment) {
            $assignment->update([
                'status' => 'pending',
                'completed_at' => null,
            ]);
        }
        
        // Get user information for the notification
        $submitter = Auth::user();
        $submitterName = $submitter ? $submitter->fullname ?? $submitter->name : 'A user';
        
        // Send notification to all reviewers
        foreach ($reviewerIds as $reviewerId) {
            $reviewer = \App\Models\User::find($reviewerId);
            if ($reviewer) {
                $reviewer->notify(new \App\Notifications\ReviewActionNotification(
                    $record,
                    "Submission resubmitted after revision",
                    "{$submitterName} has updated and resubmitted submission '{$record->title}' after making requested revisions."
                ));
            }
        }
    }

    /**
     * Get status description for elderly users in Indonesian
     */
    protected function getStatusDescription(): string
    {
        return match($this->record->status) {
            'draft' => 'Pengajuan masih dalam bentuk draft. Anda dapat mengedit dan melengkapi data.',
            'submitted' => 'Pengajuan sedang dalam proses review oleh tim kami.',
            'in_review' => 'Pengajuan sedang direview oleh reviewer.',
            'revision_needed' => 'Pengajuan memerlukan perbaikan. Silakan perbaiki sesuai catatan reviewer.',
            'approved' => 'Selamat! Pengajuan Anda telah disetujui.',
            'rejected' => 'Pengajuan ditolak. Silakan lihat catatan untuk informasi lebih lanjut.',
            'completed' => 'Proses pengajuan telah selesai.',
            'cancelled' => 'Pengajuan dibatalkan.',
            default => 'Status tidak dikenal.',
        };
    }

    /**
     * Get current status display with clear visual indicators
     */
    protected function getCurrentStatusDisplay(): \Illuminate\Support\HtmlString
    {
        $status = $this->record->status;
        $statusConfig = match($status) {
            'draft' => [
                'color' => 'blue',
                'icon' => '✏️',
                'title' => 'Draft',
                'description' => 'Masih dalam tahap penyusunan'
            ],
            'submitted' => [
                'color' => 'yellow',
                'icon' => '📤',
                'title' => 'Sudah Dikirim',
                'description' => 'Menunggu review'
            ],
            'in_review' => [
                'color' => 'orange',
                'icon' => '🔍',
                'title' => 'Sedang Direview',
                'description' => 'Tim sedang memeriksa pengajuan'
            ],
            'revision_needed' => [
                'color' => 'red',
                'icon' => '🔄',
                'title' => 'Perlu Perbaikan',
                'description' => 'Silakan perbaiki sesuai catatan'
            ],
            'approved' => [
                'color' => 'green',
                'icon' => '✅',
                'title' => 'Disetujui',
                'description' => 'Pengajuan berhasil disetujui'
            ],
            'rejected' => [
                'color' => 'red',
                'icon' => '❌',
                'title' => 'Ditolak',
                'description' => 'Pengajuan tidak dapat diproses'
            ],
            'completed' => [
                'color' => 'green',
                'icon' => '🏆',
                'title' => 'Selesai',
                'description' => 'Proses telah selesai'
            ],
            default => [
                'color' => 'gray',
                'icon' => '❓',
                'title' => ucfirst($status),
                'description' => 'Status pengajuan'
            ],
        ];

        $content = "<div class='p-6 bg-{$statusConfig['color']}-50 border-2 border-{$statusConfig['color']}-200 rounded-xl'>";
        $content .= "<div class='flex items-center space-x-4'>";
        $content .= "<div class='text-4xl'>{$statusConfig['icon']}</div>";
        $content .= "<div>";
        $content .= "<h3 class='text-2xl font-bold text-{$statusConfig['color']}-800'>{$statusConfig['title']}</h3>";
        $content .= "<p class='text-lg text-{$statusConfig['color']}-600'>{$statusConfig['description']}</p>";
        
        // Add current stage information if available
        if ($this->record->currentStage) {
            $content .= "<div class='mt-2 flex items-center space-x-2'>";
            $content .= "<span class='px-3 py-1 text-sm bg-{$statusConfig['color']}-100 rounded-full font-medium text-{$statusConfig['color']}-800'>";
            $content .= "Tahap: {$this->record->currentStage->name}";
            $content .= "</span>";
            $content .= "</div>";
        }
        
        $content .= "</div>";
        $content .= "</div>";
        $content .= "</div>";

        return new \Illuminate\Support\HtmlString($content);
    }

    /**
     * Get next steps description for user guidance
     */
    protected function getNextStepsDescription(): \Illuminate\Support\HtmlString
    {
        $content = match($this->record->status) {
            'draft' => "
                <div class='p-4 bg-blue-50 border border-blue-200 rounded-lg'>
                    <h4 class='font-semibold text-blue-800 mb-2'>📝 Langkah Selanjutnya:</h4>
                    <ol class='list-decimal list-inside space-y-1 text-blue-700'>
                        <li>Lengkapi semua informasi yang diperlukan</li>
                        <li>Upload semua dokumen yang diminta</li>
                        <li>Periksa kembali semua data</li>
                        <li>Klik 'Kirim untuk Review' jika sudah yakin</li>
                    </ol>
                </div>
            ",
            'revision_needed' => "
                <div class='p-4 bg-orange-50 border border-orange-200 rounded-lg'>
                    <h4 class='font-semibold text-orange-800 mb-2'>🔄 Yang Perlu Dilakukan:</h4>
                    <ol class='list-decimal list-inside space-y-1 text-orange-700'>
                        <li>Baca catatan reviewer dengan teliti</li>
                        <li>Perbaiki bagian yang diminta</li>
                        <li>Upload dokumen baru jika diperlukan</li>
                        <li>Klik 'Kirim Ulang' setelah perbaikan selesai</li>
                    </ol>
                </div>
            ",
            default => ""
        };

        return new \Illuminate\Support\HtmlString($content);
    }

    /**
     * Get helper text for file uploads
     */
    protected function getFileUploadHelperText($requirement): string
    {
        $text = '💡 ';
        
        if ($requirement->allowed_file_types) {
            $types = explode(',', $requirement->allowed_file_types);
            $text .= 'Format yang diterima: ' . implode(', ', array_map(fn($type) => strtoupper($type), $types)) . '. ';
        }
        
        $maxSize = $requirement->max_file_size ?? 10240;
        $text .= 'Ukuran maksimal: ' . number_format($maxSize / 1024, 1) . ' MB.';
        
        if ($requirement->description) {
            $text .= ' ' . $requirement->description;
        }
        
        return $text;
    }

    /**
     * Get simplified document schema for elderly-friendly UI
     */
    protected function getSimplifiedDocumentSchema(): array
    {
        if (!$this->record->submissionType) {
            return [
                Placeholder::make('no_type')
                    ->content('⚠️ Tidak ada jenis pengajuan yang terkait dengan record ini')
                    ->columnSpanFull(),
            ];
        }

        $requirements = $this->record->submissionType->documentRequirements()->get();

        if ($requirements->isEmpty()) {
            return [
                Placeholder::make('no_requirements')
                    ->content('ℹ️ Tidak ada persyaratan dokumen untuk jenis pengajuan ini')
                    ->columnSpanFull(),
            ];
        }

        $fields = [];

        foreach ($requirements as $requirement) {
            $existingDocs = $this->record->submissionDocuments()
                ->where('requirement_id', $requirement->id)
                ->with('document')
                ->latest()
                ->get();

            $fields[] = Section::make("📄 {$requirement->name}")
                ->description($requirement->description ?: 'Silakan upload dokumen yang diperlukan')
                ->extraAttributes([
                    'class' => $requirement->required ? 'border-l-4 border-red-400 bg-red-50' : 'border-l-4 border-blue-400 bg-blue-50',
                ])
                ->schema([
                    // Status indicator
                    Placeholder::make('document_status')
                        ->content(function () use ($requirement, $existingDocs) {
                            if ($existingDocs->count() > 0) {
                                $latestDoc = $existingDocs->first();
                                $statusIcon = match ($latestDoc->status) {
                                    'pending' => '⏳',
                                    'approved' => '✅',
                                    'rejected' => '❌',
                                    'revision_needed' => '🔄',
                                    default => '📄',
                                };
                                
                                $statusText = match ($latestDoc->status) {
                                    'pending' => 'Menunggu Review',
                                    'approved' => 'Dokumen Diterima',
                                    'rejected' => 'Dokumen Ditolak',
                                    'revision_needed' => 'Perlu Diperbaiki',
                                    default => 'Tidak Diketahui',
                                };

                                $downloadUrl = route('filament.admin.documents.download', $latestDoc->document_id);
                                
                                return new \Illuminate\Support\HtmlString("
                                    <div class='p-4 bg-white border rounded-lg'>
                                        <div class='flex items-center justify-between'>
                                            <div class='flex items-center space-x-3'>
                                                <span class='text-2xl'>{$statusIcon}</span>
                                                <div>
                                                    <p class='font-semibold text-gray-800'>{$latestDoc->document->title}</p>
                                                    <p class='text-sm text-gray-600'>{$statusText}</p>
                                                </div>
                                            </div>
                                            <div class='text-right'>
                                                <a href='{$downloadUrl}' target='_blank' 
                                                   class='inline-flex items-center px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700'>
                                                    📥 Unduh
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                ");
                            } else {
                                $statusText = $requirement->required ? '❗ Dokumen Wajib - Belum Diupload' : 'ℹ️ Dokumen Opsional - Belum Diupload';
                                $bgColor = $requirement->required ? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200';
                                
                                return new \Illuminate\Support\HtmlString("
                                    <div class='p-4 {$bgColor} border rounded-lg'>
                                        <p class='text-gray-700 font-medium'>{$statusText}</p>
                                    </div>
                                ");
                            }
                        }),

                    // Upload field (only show if status allows editing)
                    FileUpload::make("documents.{$requirement->id}")
                        ->label('📁 Upload Dokumen Baru')
                        ->helperText($this->getFileUploadHelperText($requirement))
                        ->acceptedFileTypes(
                            $requirement->allowed_file_types ?
                                array_map(fn($type) => ".$type", explode(',', $requirement->allowed_file_types)) :
                                ['application/pdf', 'image/*', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']
                        )
                        ->preserveFilenames()
                        ->maxSize($requirement->max_file_size ?? 10240)
                        ->live()
                        ->visible(fn() => in_array($this->record->status, ['draft', 'revision_needed']))
                        ->afterStateUpdated(function ($state, Set $set) use ($requirement) {
                            if (!$state) return;

                            $filename = $state instanceof TemporaryUploadedFile ?
                                $state->getClientOriginalName() : basename($state);

                            // Create document record
                            $document = Document::create([
                                'title' => $filename,
                                'uri' => $this->formatDocumentUri($requirement->id, $filename),
                                'mimetype' => $state instanceof TemporaryUploadedFile ? $state->getMimeType() : Storage::disk('public')->mimeType($state),
                                'size' => $state instanceof TemporaryUploadedFile ? $state->getSize() : Storage::disk('public')->size($state),
                            ]);

                            // Move file from temporary storage
                            if ($state instanceof TemporaryUploadedFile) {
                                $uri = $this->formatDocumentUri($requirement->id, $state->getClientOriginalName());
                                Storage::disk('public')->put(
                                    $uri,
                                    file_get_contents($state->getRealPath())
                                );
                                $document->update(['uri' => $uri]);
                            }

                            // Create submission document relationship
                            $this->record->submissionDocuments()->create([
                                'document_id' => $document->id,
                                'requirement_id' => $requirement->id,
                                'status' => 'pending',
                            ]);

                            // Clear the upload field
                            $set("documents.{$requirement->id}", null);
                            $this->checkDocumentRequirements();

                            // Success notification
                            Notification::make()
                                ->title('✅ Dokumen berhasil diupload')
                                ->success()
                                ->send();
                        }),
                ])
                ->collapsible()
                ->collapsed(fn() => $existingDocs->count() > 0 && $existingDocs->first()->status === 'approved');
        }

        return $fields;
    }

    /**
     * Get simplified action schema for elderly-friendly UI
     */
    protected function getSimplifiedActionSchema(): array
    {
        return [
            Section::make('🎯 Tindakan yang Dapat Dilakukan')
                ->description('Pilih tindakan yang ingin Anda lakukan')
                ->schema([
                    // Status display
                    Placeholder::make('current_status_display')
                        ->content(fn() => $this->getCurrentStatusDisplay()),

                    // Next steps guidance
                    Placeholder::make('next_steps')
                        ->content(fn() => $this->getNextStepsDescription())
                        ->visible(fn() => in_array($this->record->status, ['draft', 'revision_needed'])),

                    // Status change field
                    Select::make('status')
                        ->label('🔄 Ubah Status Pengajuan')
                        ->options(function () {
                            $options = [];

                            if ($this->record->status === 'draft') {
                                $options['draft'] = '📝 Simpan sebagai Draft (untuk diedit kemudian)';
                                if ($this->isDocumentComplete) {
                                    $options['submitted'] = '📤 Kirim untuk Review (siap diproses)';
                                }
                                $options['cancelled'] = '❌ Batalkan Pengajuan';
                            } elseif ($this->record->status === 'revision_needed') {
                                if ($this->isDocumentComplete) {
                                    $options['submitted'] = '🔄 Kirim Ulang untuk Review';
                                }
                                $options['revision_needed'] = '📝 Simpan Perubahan (masih perlu perbaikan)';
                                $options['cancelled'] = '❌ Batalkan Pengajuan';
                            } elseif ($this->record->status === 'cancelled') {
                                $options['draft'] = '📝 Aktifkan Kembali sebagai Draft';
                            }

                            return $options;
                        })
                        ->default(fn() => $this->record->status)
                        ->required()
                        ->helperText(function () {
                            if ($this->record->status === 'draft' && !$this->isDocumentComplete) {
                                return '⚠️ Anda perlu mengupload semua dokumen wajib sebelum mengirim untuk review';
                            }
                            if ($this->record->status === 'revision_needed') {
                                return 'ℹ️ Setelah memperbaiki sesuai catatan reviewer, Anda dapat mengirim ulang';
                            }
                            return 'ℹ️ Mengubah status akan mempengaruhi proses pengajuan Anda';
                        })
                        ->disabled(function () {
                            return !in_array($this->record->status, ['draft', 'cancelled', 'revision_needed']);
                        }),

                    // Reviewer notes display (read-only)
                    Textarea::make('reviewer_notes')
                        ->label('📝 Catatan dari Reviewer')
                        ->placeholder('Belum ada catatan dari reviewer')
                        ->rows(4)
                        ->disabled()
                        ->visible(fn() => !empty($this->record->reviewer_notes)),
                ])
        ];
    }

    /**
     * Get read-only display for non-editable statuses
     */
    protected function getReadOnlyDisplay(): array
    {
        return [
            Section::make('📊 Status Pengajuan')
                ->schema([
                    Placeholder::make('status_display')
                        ->content(fn() => $this->getCurrentStatusDisplay()),

                    Placeholder::make('progress_info')
                        ->content(function () {
                            $content = "<div class='p-4 bg-blue-50 border border-blue-200 rounded-lg'>";
                            $content .= "<h4 class='font-semibold text-blue-800 mb-2'>ℹ️ Informasi Proses:</h4>";
                            
                            if ($this->record->status === 'submitted') {
                                $content .= "<p class='text-blue-700'>Pengajuan Anda sedang dalam antrian review. Tim kami akan segera memproses pengajuan ini.</p>";
                            } elseif ($this->record->status === 'in_review') {
                                $content .= "<p class='text-blue-700'>Pengajuan sedang direview oleh tim ahli. Proses ini membutuhkan waktu beberapa hari kerja.</p>";
                            } elseif ($this->record->status === 'approved') {
                                $content .= "<p class='text-blue-700'>Selamat! Pengajuan Anda telah disetujui. Sertifikat akan segera diproses.</p>";
                            } elseif ($this->record->status === 'rejected') {
                                $content .= "<p class='text-blue-700'>Pengajuan tidak dapat diproses. Silakan lihat catatan reviewer untuk informasi lebih lanjut.</p>";
                            } elseif ($this->record->status === 'completed') {
                                $content .= "<p class='text-blue-700'>Proses pengajuan telah selesai sepenuhnya. Terima kasih telah menggunakan layanan kami.</p>";
                            }
                            
                            $content .= "</div>";
                            return new \Illuminate\Support\HtmlString($content);
                        }),

                    // Show reviewer notes if available
                    Textarea::make('reviewer_notes')
                        ->label('📝 Catatan dari Reviewer')
                        ->rows(4)
                        ->disabled()
                        ->visible(fn() => !empty($this->record->reviewer_notes)),
                ])
        ];
    }
}
